4. Interface Segregation Principle (ISP)

The Interface Segregation Principle (ISP) states that clients should not be forced to depend upon interface 
members they do not use. When we have non-cohesive interfaces, the ISP guides us to create multiple, smaller, 
cohesive interfaces.

When you apply ISP, classes and their dependencies communicate using tightly-focused interfaces, 
minimizing dependencies on unused members and reducing coupling accordingly. Smaller interfaces are easier to 
implement, improving flexibility and the possibility of reuse. As fewer classes share these interfaces, the number 
of changes that are required in response to an interface modification is lowered, which increases robustness.

Basically, the lesson here is “Don’t depend on things you don’t need”. 

Here is an example:
Picture an ATM machine (aka Bankomat), which has a screen where we wish to display different messages. 
How would you solve the problem of displaying different messages? We apply SRP, OCP and LSP and come up with a 
solution–but still, this system would be hard to maintain. Why is that?

Imagine the ATM’s owner wants to add a message that appears only for withdrawal functionality, 
they want to display the message that says “This ATM will charge you some fee for withdrawals, do you agree?” How 
would you solve it?

Perhaps you would add a method to the Messenger interface and be done with it. 
But this causes you to recompile all the users of this interface and almost all the system needs to be redeployed, 
which is in direct violation of OCP. Let the code rot begin!

What happened here was that changing the withdrawal functionality caused changes to other totally unrelated 
functionalities as well, which is something, as we now know, we don’t want. How did this happen?

Interface Segregation Principle Example
Actually, here is backwards dependency at play, where each functionality that uses this Messengers 
interface depends on methods it does not need but are needed by other functionalities. 
Here is what we want to avoid:

public interface Messenger {
  askForCard();
  tellInvalidCard();
  askForPin();
  tellInvalidPin();
  tellCardWasSiezed();
  askForAccount();
  tellNotEnoughMoneyInAccount();
  tellAmountDeposited();
  tellBalance();
}

Instead, split the Messenger interface up so that different ATM functionality depend on separate Messengers.

public interface LoginMessenger {
  askForCard();
  tellInvalidCard();
  askForPin();
  tellInvalidPin();	
}

public interface WithdrawalMessenger {
  tellNotEnoughMoneyInAccount();
  askForFeeConfirmation();
}

public class EnglishMessenger implements LoginMessenger, WithdrawalMessenger {
  ...	
}
