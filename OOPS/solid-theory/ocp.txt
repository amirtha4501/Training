2. Open-Closed Principle (OCP)

The Open-Closed Principle (OCP) states that classes should be open for extension but closed for modification. 
“Open to extension” means that you should design your classes so that new functionality can be added as new 
requirements are generated. “Closed for modification” means that once you have developed a class you should 
never modify it, except to correct bugs.

These two parts of the principle appear to be contradictory. However, if we correctly structure your classes 
and their dependencies, we can add functionality without editing existing source code.

Generally you achieve this by referring to abstractions for dependencies, 
such as interfaces or abstract classes, rather than using concrete classes. 
Functionality can be added by creating new classes that implement the interfaces.

Applying OCP to your projects limits the need to change source code once it has been 
written, tested and debugged. This reduces the risk of introducing new bugs to existing code, 
leading to more robust software.