REQUIREMENTS:
1. To perform read operation for Person Service

ENTITY:
1. Person
2. PersonService
3. AppException
4. ErrorCode

METHOD SIGNATURE:
1. public Person read(int id);

WORK TO BE DONE:
1. Check whether the id is valid
    1.1 Throw AppException as INVALID_INPUT with message "id is invalid"
2. Establish connection using JDBC driver and store it in con of type Connection
3. Prepare select query where the id is the input id and store it in selectPersonQuery of type String
4. Prepare "ps" using con and selectPersonQuery
5. Check if the includeAddress variable is true
    5.1 If true, make a prepareStatement to get the address of the person
        and set all those obtained values into the person object
6. If the person object is empty
    6.1 Throw AppException as READ_FAIILED with the message "id not found"
7. Return person

PSEUDOCODE:

    class PersonService {
        public Person read(int id, boolean includeAddress) throws AppException {

            if (id <= 0) {
                throw new AppException(ExceptionCode.INVALID_INPUT, "id is invalid");
            }
            Person person = new Person();

            try {
                Connection con = DriverManager.getConnection(AppConfig.dbString, AppConfig.dbUsername,
                        AppConfig.dbPassword);
                PreparedStatement ps = con.prepareStatement(Query.selectPersonQuery + id);

                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    String name = rs.getString("name");
                    String email = rs.getString("email");
                    Date birthDate = rs.getDate("birth_date");
                    Date createdDate = rs.getDate("created_date");
                    int personId = rs.getInt("address_id");

                    person.setName(name);
                    person.setEmail(email);
                    person.setBirthDate(birthDate);
                    person.setCreatedDate(createdDate);

                    if (includeAddress) {
                        PreparedStatement psPerson = con.prepareStatement(Query.selectAddressQuery + personId);
                        ResultSet rsPerson = psPerson.executeQuery();

                        if (rsPerson.next()) {
                            String street = rsPerson.getString("street");
                            String city = rsPerson.getString("city");
                            long postalCode = rsPerson.getLong("postal_code");

                            person.setStreet(street);
                            person.setCity(city);
                            person.setPostalCode(postalCode);
                        }
                    }
                }
            } catch (Exception e) {
                System.out.println("error: " + e);
            }

            if (person.isEmpty()) {
                throw new AppException(ExceptionCode.READ_FAILED, "id not found");
            }
            return person;
        }
    }
