REQUIREMENTS:
1. To perform create operation for Person Service

ENTITY:
1. Person
2. PersonService
3. AppException
4. ErrorCode

METHOD SIGNATURE:
1. public long create(Person person);

WORK TO BE DONE:
1. Check whether the name is Empty
    1.1 Throw AppException with message "name should not be empty"
2. Check whether the email is invalid
    2.1 Throw AppException with message "email is invalid"
3. Establish connection using JDBC driver and store it in con of type Connection
4. Prepare insert query and store it in insertQuery of type String
5. Check if the address object is not empty for creating address if it's given
    5.1 Invoke addressService create method and store the return value in addressId variable
        Then set addressId value to person object
6. Check if the person email is not isUnique
    6.1 Throw AppException with message "Email unique constraint failed
    6.2 If unique,
        6.2.1 Prepare "ps" using con, return auto generated keys to return the generated id and insertQuery
        6.2.1 Set person in ps and execute ps
7. Check whether the generatedPersonId is zero
    7.1 Throw AppException with message "Person creation failed"
8. Return generatedPersonId
9. If the address is not given, do the same task with empty address using method overloading

PSEUDOCODE:

    class PersonService {

        public boolean isUnique(String email) throws SQLException {
            boolean result = false;
            int id = -1;

            Connection con = DriverManager.getConnection(AppConfig.dbString, AppConfig.dbUsername, AppConfig.dbPassword);
            PreparedStatement ps = con.prepareStatement(Query.selectEmailExists + email);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                id = rs.getInt("id");
            }
            if (id == -1) {
                result = true;
            }
            return result;
        }

        public long create(Person person) {
            
            if (person.name == null) {
                throw new AppException(errorCode, "name should not be empty")
            }
            
            if (person.email is not of type email) {
                throw new AppException(errorCode, "email is invalid")
            }
            
            String url;
            String username;
            String password;

            try {
                Connection con = DriverManager.getConnection(url, username, password);

                String insertQuery = "INSERT INTO address VALUES(?, ?, ?, ?, ?)";
                PreparedStatement ps = con.prepareStatement(insertQuery, RETURN_GENERATED_KEYS);
                ps.setString(1, person.name);
                ps.setString(2, person.email);
                ps.setString(3, person.address_id);
                ps.setString(4, person.birth_date);
                ps.setString(5, person.create_date);

                long generatedPersonId = ps.executeUpdate();
            } catch() {
                System.out.println(errorCode, errorMessage);
            }

            if (generatedPersonId == 0) {
                throw new AppException(errorCode, "Person creation failed");
            }

            return generatedPersonId;      
        }
    }
